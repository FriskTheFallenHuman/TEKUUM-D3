/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 
Copyright (C) 2013 Robert Beckebans

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "renderprogs/global.inc"


uniform sampler2D		samp0 : register(s0); // texture 0 is _currentRender

// User Renderparms start at 128 as per renderprogs.h

uniform float4 rpUser0 : register(c128); // rpScroll
uniform float4 rpUser1 : register(c129); // rpDeformMagnitude

struct PS_IN
{
	float4 position		: VPOS;
	//float3 texcoord0	: TEXCOORD0_centroid;
	//float3 texcoord1	: TEXCOORD1_centroid;
	//float4 color		: COLOR0;
};

struct PS_OUT
{
	float4 color : COLOR;
};

float4 getCurrentRenderColor( float2 xy )
{
	// calculate the screen texcoord in the 0.0 to 1.0 range
	float2 screenTexCoord = vposToScreenPosTexCoord( xy );
	screenTexCoord = saturate( screenTexCoord );
	
	return tex2D( samp0, screenTexCoord.xy );
}

void main( PS_IN fragment, out PS_OUT result )
{
	//float4 color0 = getCurrentRenderColor( fragment.position.xy + float2( 0.0f, 0.0f ) * 1.0f );

	// don't highlight the hands, which were drawn with alpha = 0
	//if( color0.a == 0.0 )
	//{
	//	discard;
	//}

	float4 color1 = getCurrentRenderColor( fragment.position.xy + float2( -1.0f, -1.0f ) * 1.0f );
	float4 color2 = getCurrentRenderColor( fragment.position.xy + float2(  1.0f, -1.0f ) * 1.0f );
	float4 color3 = getCurrentRenderColor( fragment.position.xy + float2( -1.0f,  1.0f ) * 1.5f );
	float4 color4 = getCurrentRenderColor( fragment.position.xy + float2(  1.0f,  1.0f ) * 1.5f );
	
	const float3 onethird = float3( 0.333333, 0.333333, 0.333333 );
	float shade1 = dot3( color1, onethird );
	float shade2 = dot3( color2, onethird );
	float shade3 = dot3( color3, onethird );
	float shade4 = dot3( color4, onethird );
	
	float4 color = abs( color1 - color4 );
	color += abs( color2 - color3 );
	color /= 2.0;
	
	const float AMPLIFIER = 2.0f;
	
	//float4 color = mix( float4( 0.1f, 0.18f, 0.3f, 1.0f ), float4( 0.4f, 0.3f, 0.2f, 1.0f ), shade );
	//float4 color = mix( float4( rpUser0.r, rpUser0.g, rpUser0.b, 1.0f ), float4( rpUser1.r, rpUser1.g, rpUser1.b, 1.0f ), shade );

	color.g += length( color ) * AMPLIFIER;
	color.a = 1.0f;
	
	
	result.color = color;
	//result.color = float4( shade1, shade2, shade4, 1.0f );
	//result.color = float4( color0.a, color0.a, color0.a, 1.0f );
}
