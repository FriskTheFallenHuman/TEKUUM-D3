/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 
Copyright (C) 2013-2014 Robert Beckebans

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "renderprogs/global.inc"

uniform sampler2D				samp0 : register(s0); // texture 1 is the per-surface bump map
uniform sampler2D				samp1 : register(s1); // texture 2 is the light falloff texture
uniform sampler2D				samp2 : register(s2); // texture 3 is the light projection texture
uniform sampler2D				samp3 : register(s3); // texture 4 is the per-surface diffuse map
uniform sampler2D				samp4 : register(s4); // texture 5 is the per-surface specular map
uniform sampler2DArrayShadow	samp5 : register(s5); // texture 6 is the shadowmap array
uniform sampler2D				samp6 : register(s6); // texture 7 is the jitter texture
uniform sampler2D				samp7 : register(s7); // texture 8 is the reflection buffer



struct PS_IN
{
	half4 position		: VPOS;
	half4 texcoord0		: TEXCOORD0_centroid;
	half4 texcoord1		: TEXCOORD1_centroid;
	half4 texcoord2		: TEXCOORD2_centroid;
	half4 texcoord3		: TEXCOORD3_centroid;
	half4 texcoord4		: TEXCOORD4_centroid;
	half4 texcoord5		: TEXCOORD5_centroid;
	half4 texcoord6		: TEXCOORD6_centroid;
	half4 texcoord7		: TEXCOORD7_centroid;
	half4 texcoord8		: TEXCOORD8_centroid;
	half4 texcoord9		: TEXCOORD9_centroid;
	half4 color			: COLOR0;
};

struct PS_OUT
{
	half4 color : COLOR;
};


// Normal Distribution Function ( NDF ) or D( h )
// GGX ( Trowbridge-Reitz )
half Distribution_GGX( half hdotN, half alpha )
{
	// alpha is assumed to be roughness^2
	float a2 = alpha * alpha;
	//float tmp = ( hdotN * hdotN ) * ( a2 - 1.0 ) + 1.0;
	float tmp = ( hdotN * a2 - hdotN ) * hdotN + 1.0;
	
	return ( a2 / ( PI * tmp * tmp ) );
}

half Distribution_GGX_Disney( half hdotN, half alphaG )
{
	float a2 = alphaG * alphaG;
	float tmp = ( hdotN * hdotN ) * ( a2 - 1.0 ) + 1.0;
	//tmp *= tmp;
	
	return ( a2 / ( PI * tmp ) );
}

half Distribution_GGX_1886( half hdotN, half alpha )
{
	// alpha is assumed to be roughness^2
	return ( alpha / ( PI * pow( hdotN * hdotN * ( alpha - 1.0 ) + 1.0, 2.0 ) ) );
}

// Fresnel term F( v, h )
// Fnone( v, h ) = F(0°) = specularColor
half3 Fresnel_Schlick( half3 specularColor, half vdotH )
{
	return specularColor + ( 1.0 - specularColor ) * pow( 1.0 - vdotH, 5.0 );
}

// Visibility term G( l, v, h )
// Very similar to Marmoset Toolbag 2 and gives almost the same results as Smith GGX
float Visibility_Schlick( half vdotN, half ldotN, float alpha )
{
	float k = alpha * 0.5;
	
	float schlickL = ( ldotN * ( 1.0 - k ) + k );
	float schlickV = ( vdotN * ( 1.0 - k ) + k );
	
	return ( 0.25 / ( schlickL * schlickV ) );
	//return ( ( schlickL * schlickV ) / ( 4.0 * vdotN * ldotN ) );
}

// see s2013_pbs_rad_notes.pdf
// Crafting a Next-Gen Material Pipeline for The Order: 1886
// this visibility function also provides some sort of back lighting
float Visibility_SmithGGX( half vdotN, half ldotN, float alpha )
{
	// alpha is already roughness^2

	float V1 = ldotN + sqrt( alpha + ( 1.0 - alpha ) * ldotN * ldotN );
	float V2 = vdotN + sqrt( alpha + ( 1.0 - alpha ) * vdotN * vdotN );
	
	// RB: avoid too bright spots
	return ( 1.0 / max( V1 * V2, 0.15 ) );
}

// see s2013_pbs_black_ops_2_notes.pdf
half a1vf( half g )
{
	return ( 0.25 * g + 0.75 );
}

half a004( half g, half vdotN )
{
	float t = min( 0.475 * g, exp2( -9.28 * vdotN ) );
	return ( t + 0.0275 ) * g + 0.015;
}

half a0r( half g, half vdotN )
{
	return ( ( a004( g, vdotN ) - a1vf( g ) * 0.04 ) / 0.96 );
}

float3 EnvironmentBRDF( half g, half vdotN, float3 rf0 )
{
	float4 t = float4( 1.0 / 0.96, 0.475, ( 0.0275 - 0.25 * 0.04 ) / 0.96, 0.25 );
	t *= float4( g, g, g, g );
	t += float4( 0.0, 0.0, ( 0.015 - 0.75 * 0.04 ) / 0.96, 0.75 );
	half a0 = t.x * min( t.y, exp2( -9.28 * vdotN ) ) + t.z;
	half a1 = t.w;
	
	return saturate( a0 + rf0 * ( a1 - a0 ) );
}



void main( PS_IN fragment, out PS_OUT result )
{
	half4 bumpMap =			tex2D( samp0, fragment.texcoord1.xy );
	half4 lightFalloff =	idtex2Dproj( samp1, fragment.texcoord2 );
	half4 lightProj	=		idtex2Dproj( samp2, fragment.texcoord3 );
	half4 YCoCG =			tex2D( samp3, fragment.texcoord4.xy );
	half4 specMap =			tex2D( samp4, fragment.texcoord5.xy );

	half3 lightVector = normalize( fragment.texcoord0.xyz );
	half3 viewVector = normalize( fragment.texcoord6.xyz );
	half3 diffuseMap = ConvertYCoCgToRGB( YCoCG );

	half3 localNormal;
	// RB begin
#if defined(USE_NORMAL_FMT_RGB8)
	localNormal.xy = bumpMap.rg - 0.5;
#else
	localNormal.xy = bumpMap.wy - 0.5;
#endif
	// RB end
	localNormal.z = sqrt( abs( dot( localNormal.xy, localNormal.xy ) - 0.25 ) );
	localNormal = normalize( localNormal );
	
	// traditional very dark Lambert light model used in Doom 3
	half ldotN = saturate( dot3( localNormal, lightVector ) );

#if defined(USE_HALF_LAMBERT)
	// RB: http://developer.valvesoftware.com/wiki/Half_Lambert
	half halfLdotN = dot3( localNormal, lightVector ) * 0.5 + 0.5;
	halfLdotN *= halfLdotN;

	half lambert = halfLdotN;
#else
	half lambert = ldotN;
#endif


	//
	// shadow mapping
	//
	int shadowIndex = 0;
	
#if defined( LIGHT_POINT )
	float3 toLightGlobal = normalize( fragment.texcoord8.xyz );
	
	float axis[6];
	axis[0] = -toLightGlobal.x;
	axis[1] =  toLightGlobal.x;
	axis[2] = -toLightGlobal.y;
	axis[3] =  toLightGlobal.y;
	axis[4] = -toLightGlobal.z;
	axis[5] =  toLightGlobal.z;

	for( int i = 0; i < 6; i++ )
	{
		if( axis[i] > axis[shadowIndex] )
		{
			shadowIndex = i;
		}
	}

#endif // #if defined( POINTLIGHT )

#if defined( LIGHT_PARALLEL )
	
	float viewZ = -fragment.texcoord9.z;
	
	shadowIndex = 4;
	for( int i = 0; i < 4; i++ )
	{
		if( viewZ < rpCascadeDistances[i] )
		{
			shadowIndex = i;
			break;
		}
	}
#endif
	
#if 0
	if( shadowIndex == 0 )
	{
		result.color = float4( 1.0, 0.0, 0.0, 1.0 );
	}
	else if( shadowIndex == 1 )
	{
		result.color = float4( 0.0, 1.0, 0.0, 1.0 );
	}
	else if( shadowIndex == 2 )
	{
		result.color = float4( 0.0, 0.0, 1.0, 1.0 );
	}
	else if( shadowIndex == 3 )
	{
		result.color = float4( 1.0, 1.0, 0.0, 1.0 );
	}
	else if( shadowIndex == 4 )
	{
		result.color = float4( 1.0, 0.0, 1.0, 1.0 );
	}
	else if( shadowIndex == 5 )
	{
		result.color = float4( 0.0, 1.0, 1.0, 1.0 );
	}
	
	//result.color.xyz *= lightColor;
	return;
#endif
	
	float4 shadowMatrixX = rpShadowMatrices[ int ( shadowIndex * 4 + 0 ) ];
	float4 shadowMatrixY = rpShadowMatrices[ int ( shadowIndex * 4 + 1 ) ];
	float4 shadowMatrixZ = rpShadowMatrices[ int ( shadowIndex * 4 + 2 ) ];
	float4 shadowMatrixW = rpShadowMatrices[ int ( shadowIndex * 4 + 3 ) ];
	
	float4 modelPosition = float4( fragment.texcoord7.xyz, 1.0 );
	float4 shadowTexcoord;
	shadowTexcoord.x = dot4( modelPosition, shadowMatrixX );
	shadowTexcoord.y = dot4( modelPosition, shadowMatrixY );
	shadowTexcoord.z = dot4( modelPosition, shadowMatrixZ );
	shadowTexcoord.w = dot4( modelPosition, shadowMatrixW );
	
	//float bias = 0.005 * tan( acos( ldotN ) );
	//bias = clamp( bias, 0, 0.01 );
	float bias = 0.001;
	
	shadowTexcoord.xyz /= shadowTexcoord.w;
	//shadowTexcoord.z = shadowTexcoord.z * 0.9991;
	shadowTexcoord.z = shadowTexcoord.z - bias;
	shadowTexcoord.w = float(shadowIndex);

#if 0
	result.color.xyz = float3( shadowTexcoord.z, shadowTexcoord.z, shadowTexcoord.z );
	result.color.w = 1.0;
	return;
#endif

	// multiple taps
	
#if 0
	float4 base = shadowTexcoord;
	
	base.xy += rpJitterTexScale.xy * -0.5;
	
	float shadow = 0.0;
	
	//float stepSize = 1.0 / 16.0;
	float numSamples = rpScreenCorrectionFactor.w;
	float stepSize = 1.0 / numSamples;
	
	float4 jitterTC = ( fragment.position * rpScreenCorrectionFactor ) + rpJitterTexOffset;
	for( float i = 0.0; i < numSamples; i += 1.0 )
	{
		float4 jitter = base + tex2D( samp6, jitterTC.xy ) * rpJitterTexScale;
		jitter.zw = shadowTexcoord.zw;
	
		shadow += texture( samp5, jitter.xywz );
		jitterTC.x += stepSize;
	}
	
	shadow *= stepSize;
#else
	
	const float2 poissonDisk[12] = float2[](
	float2(0.6111618, 0.1050905),
	float2(0.1088336, 0.1127091),
	float2(0.3030421, -0.6292974),
	float2(0.4090526, 0.6716492),
	float2(-0.1608387, -0.3867823),
	float2(0.7685862, -0.6118501),
	float2(-0.1935026, -0.856501),
	float2(-0.4028573, 0.07754025),
	float2(-0.6411021, -0.4748057),
	float2(-0.1314865, 0.8404058),
	float2(-0.7005203, 0.4596822),
	float2(-0.9713828, -0.06329931) );
	
	float shadow = 0.0;
	
	// RB: casting a float to int and using it as index can really kill the performance ...
	int numSamples = 12; //int(rpScreenCorrectionFactor.w);
	float stepSize = 1.0 / float(numSamples);
	
	float4 jitterTC = ( fragment.position * rpScreenCorrectionFactor ) + rpJitterTexOffset;
	float4 random = tex2D( samp6, jitterTC.xy ) * PI;
	//float4 random = fragment.position;
	
	float2 rot;
	rot.x = cos( random.x );
	rot.y = sin( random.x );
	
	float shadowTexelSize = rpScreenCorrectionFactor.z * rpJitterTexScale.x;
    for( int i = 0; i < 12; i++ )
    {
        float2 jitter = poissonDisk[i];
		float2 jitterRotated;
		jitterRotated.x = jitter.x * rot.x - jitter.y * rot.y;
		jitterRotated.y = jitter.x * rot.y + jitter.y * rot.x;
        
		float4 shadowTexcoordJittered = float4( shadowTexcoord.xy + jitterRotated * shadowTexelSize, shadowTexcoord.z, shadowTexcoord.w );
       
        shadow += texture( samp5, shadowTexcoordJittered.xywz);
    }

   shadow *= stepSize;

	//float shadow = texture( samp5, shadowTexcoord.xywz );
#endif


	half3 halfAngleVector = normalize( lightVector + viewVector );
	half hdotN = saturate( dot3( halfAngleVector, localNormal ) );

#if 1
	/* 
	Physically based shading
	
	Lambert diffuse BRDF combined with Cook-Torrance microfacet specular BRDF
	
							D( h ) * F( v, h ) * G( l, v, h )
	f( l, v ) = diffuse + ---------------------------------
								4 * ( n * l ) ( n * v )
	*/
	
	const half3 goldColor = half3( 1.00, 0.71, 0.29 );
								
	//const half3 baseColor = goldColor;
	const half3 baseColor = diffuseMap;
	
	const half metallic = 0.0;
	
	// rpDiffuseModifier contains light color
	half3 lightColor = lightProj.xyz * lightFalloff.xyz * rpDiffuseModifier.xyz;
	
	half vdotN = saturate( dot3( viewVector, localNormal ) );
	half vdotH = saturate( dot3( viewVector, halfAngleVector ) );
	
	// the vast majority of real-world materials (anything not metal or gems) have F(0°) values in a very narrow range (~0.02 - 0.06)
		
	// HACK calculate roughness from D3 gloss maps
	// converting from linear to sRGB space give pretty results
	const half glossiness = clamp( pow( dot( LUMINANCE_VECTOR.rgb, specMap.rgb ) * 0.4, 1.0 / 2.2 ) * 1.0, 0.0, 0.98 );
	
	//const half roughness = a0r( dot( LUMINANCE_VECTOR.rgb, specMap.rgb ) * 0.1, vdotN );
	//const half roughness = 1.0 - ( ( dot( LUMINANCE_VECTOR.rgb, specMap.rgb ) * 1.0 ) * 0.4 + 0.6 );
	//const half glossiness = 0.98;
	const half roughness = 1.0 - glossiness;
	//const half roughness = 0.02;
	
	//float2 screenTexCoord = vposToScreenPosTexCoord( fragment.position.xy );
	//screenTexCoord = saturate( screenTexCoord );
	
	//half3 reflectColor1 = tex2D( samp7, screenTexCoord.xy ).rgb;
	//half3 reflectColor2 = baseColor.rgb; //mix( specMap.rgb, , metallic );
	//half3 reflectColor = max( reflectColor1, reflectColor2 );
	//half3 reflectColor = baseColor.rgb;
	half3 reflectColor = specMap.rgb * rpSpecularModifier.rgb;
	
	// alpha modifications by Disney - s2012_pbs_disney_brdf_notes_v2.pdf
	const half alpha = roughness * roughness;
	
	// reduce roughness range from [0 .. 1] to [0.5 .. 1]
	const half alphaG = pow( 0.5 + roughness * 0.5, 2.0 );
	
	//half3 D = _half3( pow( abs( hdotN ), 10.0f ) );
	half3 D = _half3( Distribution_GGX( hdotN, alpha ) );
	//half3 D = _half3( Distribution_GGX_1886( hdotN, alpha ) ); 
	//half3 G = _half3( Visibility_Schlick( ldotN, vdotN, alpha ) );
	half3 G = _half3( Visibility_SmithGGX( ldotN, vdotN, alpha ) );
	half3 F = Fresnel_Schlick( reflectColor, vdotH );
	
	// horizon
	float horizon = 1.0 - ldotN;
	horizon *= horizon;
	horizon *= horizon;
	half3 specLightColor = lightColor.rgb - lightColor.rgb * horizon;
	
	float3 specularColor = D * G * ( F * ( specLightColor.rgb * lambert ) );
	//specularColor *= ( 1.0 / max( 4.0 * vdotN * ldotN, 0.01 ) );
	
	specularColor = saturate( specularColor );

	//specularColor = EnvironmentBRDF( specMap.r, vdotN, specMap.rgb );
	
	
#if 0
	result.color = float4( _half3( F ), 1.0 );
	return;
#endif
	
	// see http://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/
	//lambert /= PI;
	
	//half3 diffuseColor = mix( diffuseMap, F0, metal ) * rpDiffuseModifier.xyz;
	half3 diffuseColor = baseColor * rpDiffuseModifier.xyz;
	diffuseColor *= lightColor * lambert * 1.0;
	
	
	
	/*
	maintain energy conservation
	
	Energy conservation is a restriction on the reflection model
	that requires that the total amount of reflected light
	cannot be more than the incoming light.
		
	http://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/
	
		Cdiff + Cspec <= 1
	*/
	//diffuseColor.rgb *= ( half3( 1.0 ) - specularColor.rgb );
	
	
	
	
	
		
#if 0 //defined(USE_METALNESS)	
	//specularColor *= ( 0.96 * metallic ) * diffuseColor + half( 0.04 );
	diffuseColor.rgb *= ( 1.0 - metallic );
	
	//diffuseColor.rgb = mix( diffuseColor, specularColor, metallic );
#endif
	
	// apply r_lightScale overbright for both diffuse and specular
	result.color.xyz = ( diffuseColor + specularColor ) * fragment.color.rgb * shadow;// + rimColor;
	result.color.w = 1.0;
	
#else
	
	/*
	OLD Blinn Phong
	*/

	const half specularPower = 10.0f;
	
	// RB: added abs
	half3 specularContribution = _half3( pow( abs( hdotN ), specularPower ) );

	half3 diffuseColor = diffuseMap * rpDiffuseModifier.xyz;
	half3 specularColor = specMap.xyz * specularContribution * rpSpecularModifier.xyz;
	half3 lightColor = lightProj.xyz * lightFalloff.xyz;
	
	/*
	half rim =  1.0f - saturate( hdotN );
	half rimPower = 16.0f;
	half3 rimColor = diffuseColor * lightProj.xyz * lightFalloff.xyz * 1.0f * pow( rim, rimPower ) * fragment.color.rgb;// * halfLdotN;
	*/

	result.color.xyz = ( diffuseColor + specularColor ) * lambert * lightColor * fragment.color.rgb * shadow;// + rimColor;
	result.color.w = 1.0;
#endif
}
