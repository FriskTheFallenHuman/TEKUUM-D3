!!ARBvp1.0 OPTION ARB_position_invariant ;

PARAM	defaultTexCoord = { 0, 0, 0, 1 };
TEMP R0, R1;

# compute texgens into R1
MOV R1, defaultTexCoord;
DP4 R1.x, program.env[39], vertex.position;
DP4 R1.y, program.env[40], vertex.position;
DP4 R1.w, program.env[41], vertex.position;

# multiply texgen texcoords by the texture matrix
DP4 R1.x, state.matrix.texture[0].row[0], R1;
DP4 R1.y, state.matrix.texture[0].row[1], R1;
MOV result.texcoord[0], R1;

# generate the vertex color, which can be 1.0, color, or 1.0 - color
# for 1.0 : env[16] = 0, env[17] = 1
# for color : env[16] = 1, env[17] = 0
# for 1.0-color : env[16] = -1, env[17] = 1
MAD	R0, vertex.color, program.env[16], program.env[17];

# Then modulate by the global color value
MUL result.color, program.env[18], R0;

END


#======================================================================

!!ARBfp1.0 
OPTION ARB_precision_hint_fastest;

TEMP R0;
TXP R0, fragment.texcoord[0], texture[0], 2D;
MUL	result.color, R0, fragment.color;

END
!!ARBvp1.0 OPTION ARB_position_invariant ;

PARAM	defaultTexCoord = { 0, 0, 0, 1 };
TEMP R0, R1;

# compute texgens into R1
MOV R1, defaultTexCoord;
DP4 R1.x, program.env[39], vertex.position;
DP4 R1.y, program.env[40], vertex.position;
DP4 R1.w, program.env[41], vertex.position;

# multiply texgen texcoords by the texture matrix
DP4 R1.x, state.matrix.texture[0].row[0], R1;
DP4 R1.y, state.matrix.texture[0].row[1], R1;
MOV result.texcoord[0], R1;

# generate the vertex color, which can be 1.0, color, or 1.0 - color
# for 1.0 : env[16] = 0, env[17] = 1
# for color : env[16] = 1, env[17] = 0
# for 1.0-color : env[16] = -1, env[17] = 1
MAD	R0, vertex.color, program.env[16], program.env[17];

# Then modulate by the global color value
MUL result.color, program.env[18], R0;

END


#======================================================================

!!ARBfp1.0 
OPTION ARB_precision_hint_fastest;

TEMP R0;
TXP R0, fragment.texcoord[0], texture[0], 2D;
MUL	result.color, R0, fragment.color;

END
