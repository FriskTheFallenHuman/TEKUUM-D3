/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 
Copyright (C) 2013 Robert Beckebans

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "renderprogs/global.inc"


uniform sampler2D		samp0 : register(s0); // texture 0 is _currentRender

// User Renderparms start at 128 as per renderprogs.h

uniform float4 rpUser0 : register(c128);
uniform float4 rpUser1 : register(c129);

struct PS_IN
{
	float4 position		: VPOS;
	//float3 texcoord0	: TEXCOORD0_centroid;
	//float3 texcoord1	: TEXCOORD1_centroid;
	float4 color		: COLOR0;
};

struct PS_OUT
{
	float4 color : COLOR;
};

float4 getCurrentRenderColor( float2 xy )
{
	// calculate the screen texcoord in the 0.0 to 1.0 range
	float2 screenTexCoord = vposToScreenPosTexCoord( xy );
	screenTexCoord = saturate( screenTexCoord );
	
	return tex2D( samp0, screenTexCoord.xy );
}

float2 barrelDistortion( float2 xy, float amount )
{
	float2 cc = xy - 0.5;
	float dist = dot2( cc, cc );
	
	return xy + cc * dist * amount;
}

float linterp( float t )
{
	return saturate( 1.0 - abs( 2.0 * t - 1.0 ) );
}

float remap( float t, float a, float b )
{
	return saturate( ( t - a ) / ( b - a ) );
}

float3 spectrumOffset( float t )
{
	float lo = step( t, 0.5 );
	float hi = 1.0 - lo;
	float w = linterp( remap( t, 1.0 / 6.0, 5.0 / 6.0 ) );
	float3 ret = float3( lo, 1.0, hi ) * float3( 1.0 - w, w, 1.0 - w );

	return pow( ret, float3( 1.0 / 2.2 ) );
}

void main( PS_IN fragment, out PS_OUT result )
{
#if 0
	float4 color0 = getCurrentRenderColor( fragment.position.xy + float2( 0.0f, 0.0f ) * 1.0f );

	// interlaced
	if( mod( floor( fragment.position.y ) , 2.0f ) > 0.0f )
	{
		float l = dot3( color0.rgb, float3( 0.2126, 0.7152, 0.722 ) );
		result.color = color0 * l;
		return;
	}
#endif

	//float time = rpUser0.x;
	
	float amount = fragment.color.a * 1.0f; //rpUser0.x;
	
	float3 sum = float3( 0.0 );
	float3 sumColor = float3( 0.0 );
	
	//float samples = rpOverbright.x;
	float samples = 12.0;// * 2;

	// calculate the screen texcoord in the 0.0 to 1.0 range
	float2 screenTexCoord = vposToScreenPosTexCoord( fragment.position.xy );
	screenTexCoord = saturate( screenTexCoord );
	
	for ( float i = 0.0; i < samples; i = i + 1.0 )
	{
		//float t = ( ( i / ( samples - 1.0 ) ) - 0.5 );
		float t = ( i / ( samples - 1.0 ) );
		//float t = log( i / ( samples - 1.0 ) );
		
		float3 so = spectrumOffset( t );
		
		sum += so.xyz;
		sumColor += so * tex2D( samp0, barrelDistortion( screenTexCoord, ( 0.5 * amount * t ) ) ).rgb;
	}
	
	result.color = float4( sumColor / sum, 1.0 );
	//result.color = float4( color0.a, color0.a, color0.a, 1.0f );
	//result.color = float4( amount, amount, amount, 1.0f );
}
